select(shifts) %>%
mutate(Durchschnitt = mean(shifts),
Anzahl = n(),
Standartabweichung = sd(shifts),
Median = median(shifts)) %>%
mutate(Name = "Shifts") %>%
select(-shifts) %>%
unique()
Totrev <- blocks_2 %>%
select(totrev) %>%
mutate(Durchschnitt = mean(totrev),
Anzahl = n(),
Standartabweichung = sd(totrev),
Median = median(totrev)) %>%
mutate(Name = "Totrev") %>%
select(-totrev) %>%
unique()
Experiment <- blocks_2 %>%
select(experiment) %>%
mutate(Durchschnitt = mean(experiment),
Anzahl = n(),
Standartabweichung = sd(experiment),
Median = median(experiment)) %>%
mutate(Name = "Experiment") %>%
select(-experiment) %>%
unique()
Blocks_DeskrTabelle <- bind_rows(Vebli, Female, Shifts, Totrev, Experiment)
Blocks_DeskrTabelle <- Blocks_DeskrTabelle[,c(5,1,2,3,4)]
Blocks_DeskrTabelle %>%
kbl(col.names = c("Name" = "Name", "Durchschnitt" = "Durchschnitt", "Anzahl" = "Anzahl", "Standartabweichung" = "Standartabweichung", "Median" = "Median"),
caption = "Deskriptive Tabelle") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kable_paper(full_width = TRUE)
Aufgabe8a <- blocks_2 %>%
filter((group == 2 | group == 3 | group == 4) & block == 1 & !is.na(female)) %>%
group_by(female) %>%
summarise(Average_Einkommen = mean(totrev),
SD_Einkommen = sd(totrev))
Aufgabe8b <- blocks_2 %>%
summarise(female = "Alle Kuriere",
Average_Einkommen = mean(totrev),
SD_Einkommen = sd(totrev))
Aufgabe8 <- rbind(Aufgabe8a, Aufgabe8b)
#Variable Geschlecht erstellen:
Aufgabe8 <- Aufgabe8 %>%
mutate(Geschlecht = case_when(grepl("1", female) ~ "weiblich",
grepl("0", female) ~ "männlich",
grepl("Alle Kuriere", female) ~ "Alle Kuriere"))
#Vorbereitung Tabelle:
Aufgabe8$female <- NULL
Aufgabe8  <- Aufgabe8 %>% select(Geschlecht, Average_Einkommen, SD_Einkommen)
#Tabelle erstellen:
Aufgabe8 %>%
kbl(col.names = c("Geschlecht" = "Geschlecht", "Average_Einkommen" = "Durchschnittliches Einkommen", "SD_Einkommen" = "Standartabweichung"),
caption = "Deskriptive Tabelle") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kable_paper(full_width = TRUE)
Tabelle1 <- blocks_2 %>%
group_by(fahrer, group, block, totrev) %>%
summarise(Avg_Einkommen = mean(totrev, na.rm = TRUE),
Schichten = shifts) %>%
unique()
Tabelle1 <- Tabelle1 %>%
mutate(Gruppe = case_when(
group == 1 ~ "Flash",
group == 2 ~ "Keine Teilnahme",
group == 3 ~ "Veloblitz: Kontrollgruppe",
group == 4 ~ "Veloblitz: Treatmentgruppe")) %>%
mutate(block1 = case_when(
block == 1 ~ "4 Wochen vorher",
block == 2 ~ "1. Treatmentphase",
block == 3 ~ "2. Treatmentphase"))
Tabelle1 <- Tabelle1 %>%
group_by(block, group) %>%
mutate(Rev_Mean = mean(totrev, na.rm = T)) %>%
mutate(Shift_Mean = mean(Schichten, na.rm = T))
Tabelle1a <- Tabelle1 %>%
filter(Gruppe == "Flash") %>%
ggplot() +
theme_bw() +
facet_grid(block1~.) +
geom_point(aes(y = Schichten, x = Avg_Einkommen), stat="identity", col = "blue")  +
ggtitle("Anbieter: Flash") +
xlim(0, 10000) +
xlab("Einkommen in Schweizer Franken") +
ylab("Anzahl Schichten") +
geom_vline(aes(xintercept=Tabelle1$Rev_Mean[Tabelle1$group == 1]), color="red")+
geom_line(aes(y = Tabelle1$Shift_Mean[Tabelle1$group == 1], x=Avg_Einkommen), color="green")+
theme(plot.title =element_text(size = 14, face = "bold"),
plot.caption = element_text(hjust = 0.5)) +
theme(axis.text.x=element_text(angle=90, size = 6, hjust = 1)) +
theme_minimal()
Tabelle1b <- Tabelle1 %>%
filter(Gruppe == "Keine Teilnahme") %>%
ggplot() +
theme_bw() +
facet_grid(block1~.) +
geom_point(aes(y = Schichten, x = Avg_Einkommen), stat="identity", col = "blue")  +
ggtitle("Keine Teilnahme") +
geom_vline(aes(xintercept=Tabelle1$Rev_Mean[Tabelle1$group == 2]), color="red")+
geom_line(aes(y = Tabelle1$Shift_Mean[Tabelle1$group == 2], x=Avg_Einkommen), color="green")+
xlim(0, 10000) +
ylim(0,20) +
xlab("Einkommen in Schweizer Franken") +
ylab("Anzahl Schichten") +
theme(plot.title =element_text(size = 14, face = "bold"),
plot.caption = element_text(hjust = 0.5)) +
theme(axis.text.x=element_text(angle=90, size = 6, hjust = 1)) +
theme_minimal()
Tabelle1c <- Tabelle1 %>%
filter(Gruppe == "Veloblitz: Kontrollgruppe") %>%
ggplot() +
theme_bw() +
facet_grid(block1~.) +
geom_point(aes(y = Schichten, x = Avg_Einkommen), stat="identity", col = "blue")  +
ggtitle("Kontrollgruppe (Veloblitz)") +
geom_vline(aes(xintercept=Tabelle1$Rev_Mean[Tabelle1$group == 3]), color="red")+
geom_line(aes(y = Tabelle1$Shift_Mean[Tabelle1$group == 3], x=Avg_Einkommen), color="green")+
xlim(0,12500)+
xlab("Einkommen in Schweizer Franken") +
ylab("Anzahl Schichten") +
theme(plot.title =element_text(size = 14, face = "bold"),
plot.caption = element_text(hjust = 0.5)) +
theme(axis.text.x=element_text(angle=90, size = 6, hjust = 1)) +
theme_minimal()
Tabelle1d <- Tabelle1 %>%
filter(Gruppe == "Veloblitz: Treatmentgruppe") %>%
ggplot() +
theme_bw() +
facet_grid(block1~.) +
geom_point(aes(y = Schichten, x = Avg_Einkommen), stat="identity", col = "blue")  +
geom_vline(aes(xintercept=Tabelle1$Rev_Mean[Tabelle1$group == 4]), color="red")+
geom_line(aes(y = Tabelle1$Shift_Mean[Tabelle1$group == 4], x=Avg_Einkommen), color="green")+
xlim(0,12500) +
ggtitle("Treatmentgruppe (Veloblitz)") +
xlab("Einkommen in Schweizer Franken") +
ylab("Anzahl Schichten") +
theme(plot.title =element_text(size = 14, face = "bold"),
plot.caption = element_text(hjust = 0.5)) +
theme(axis.text.x=element_text(angle=90, size = 6, hjust = 1)) +
theme_minimal()
#Darstellung für Flash und keine Teilnahme
grid.arrange(Tabelle1a, Tabelle1b,  ncol = 2)
#Darstellung für Treatment- und Kontrollgruppe
grid.arrange(Tabelle1c, Tabelle1d, ncol = 2)
#Selbsterstellte Funktion zur Ermittlung der oberen und unteren Schranke des Konfidenzintervalls
KonfidenzIntervallUnten <- function(KonfidenzNiveau,z) {
b1 <- mean(z)-qnorm(1- (1-KonfidenzNiveau)/2)*(sqrt(var(z))/sqrt(length(z)))
return(b1)
}
KonfidenzIntervallOben <- function(KonfidenzNiveau,z) {
b2 <- mean(z)+qnorm(1 - (1-KonfidenzNiveau)/2)*(sqrt(var(z))/sqrt(length(z)))
return(b2)
}
#Vorarbeiten zur Erstellung der Grafik 1 (Einkommen)
Tabelle2 <- Tabelle1 %>%
filter(group == 3 | group == 4) %>%
select(fahrer, block1, totrev, Gruppe)
#Konfidenzintervalle für block1 = "4 Wochen vorher"
WertEinkOb1 <- KonfidenzIntervallOben(0.95, Tabelle2$totrev[Tabelle2$block1 == "4 Wochen vorher"])
WertEinkUn1 <- KonfidenzIntervallUnten(0.95, Tabelle2$totrev[Tabelle2$block1 == "4 Wochen vorher"])
#Konfidenzintervalle für block1 = "1. Treatment Phase"
WertEinkOb2 <- KonfidenzIntervallOben(0.95, Tabelle2$totrev[Tabelle2$block1 == "1. Treatmentphase"])
WertEinkUn2 <- KonfidenzIntervallUnten(0.95, Tabelle2$totrev[Tabelle2$block1 == "1. Treatmentphase"])
#Konfidenzintervalle für block1 = "1. Treatment Phase"
WertEinkOb3 <- KonfidenzIntervallOben(0.95, Tabelle2$totrev[Tabelle2$block1 == "2. Treatmentphase"])
WertEinkUn3 <- KonfidenzIntervallUnten(0.95, Tabelle2$totrev[Tabelle2$block1 == "2. Treatmentphase"])
#Erstellung der Grafik 1
Tabelle2 %>%
ggplot(mapping = aes(x = block1, y = totrev ,color = Gruppe)) +
theme_bw() +
geom_jitter(width = 0.2) +
geom_errorbar(aes(ymax = WertEinkOb1, ymin = WertEinkUn1, x = "4 Wochen vorher")) +
geom_errorbar(aes(ymax = WertEinkOb2, ymin = WertEinkUn2, x = "1. Treatmentphase")) +
geom_errorbar(aes(ymax = WertEinkOb3, ymin = WertEinkUn3, x = "2. Treatmentphase")) +
xlab("Phase") +
ggtitle("Konfidenzintervall für Einkommen") +
ylab("Einkommen") +
guides(fill = guide_legend(title="Treatmentphase")) +
theme(plot.title = element_text(color = "black", size = 14, face = "bold"))
#Vorarbeiten zur Erstellung der Grafik 2 (Schichten)
Tabelle3 <- Tabelle1 %>%
filter(group == 3 | group == 4) %>%
select(fahrer, block1, totrev, Gruppe, Schichten)
#Konfidenzintervalle für block1 = "4 Wochen vorher"
WertEinkOb4 <- KonfidenzIntervallOben(0.95, Tabelle3$Schichten[Tabelle3$block1 == "4 Wochen vorher"])
WertEinkUn4 <- KonfidenzIntervallUnten(0.95, Tabelle3$Schichten[Tabelle3$block1 == "4 Wochen vorher"])
#Konfidenzintervalle für block1 = "1. Treatment Phase"
WertEinkOb5 <- KonfidenzIntervallOben(0.95, Tabelle3$Schichten[Tabelle3$block1 == "1. Treatmentphase"])
WertEinkUn5 <- KonfidenzIntervallUnten(0.95, Tabelle3$Schichten[Tabelle3$block1 == "1. Treatmentphase"])
#Konfidenzintervalle für block1 = "1. Treatment Phase"
WertEinkOb6 <- KonfidenzIntervallOben(0.95, Tabelle3$Schichten[Tabelle3$block1 == "2. Treatmentphase"])
WertEinkUn6 <- KonfidenzIntervallUnten(0.95, Tabelle3$Schichten[Tabelle3$block1 == "2. Treatmentphase"])
#Erstellung der Grafik 2 (Schichten)
Tabelle3 %>%
ggplot(mapping = aes(x = block1, y = Schichten ,color = Gruppe)) +
theme_bw() +
geom_jitter(width = 0.2) +
geom_errorbar(aes(ymax = WertEinkOb4, ymin = WertEinkUn4, x = "4 Wochen vorher")) +
geom_errorbar(aes(ymax = WertEinkOb5, ymin = WertEinkUn5, x = "1. Treatmentphase")) +
geom_errorbar(aes(ymax = WertEinkOb6, ymin = WertEinkUn6, x = "2. Treatmentphase")) +
xlab("Phase") +
ggtitle("Konfidenzintervall für Anzahl an Schichten") +
ylab("Schichten") +
guides(fill = guide_legend(title="Treatmentphase")) +
theme(plot.title = element_text(color = "black", size = 14, face = "bold"))
Tabelle3 <- Tabelle3 %>%
mutate(DummyTreatment = ifelse(group ==4, 1, 0))
regH0 <- lm(DummyTreatment ~ Schichten, data = Tabelle3)
summary(regH0)
#Entsprechenden Datensatz erstellen:
Reg_Blocks <- blocks_2 %>%
filter(group == 3 | group == 4) %>%
mutate(Dummy_Treatment = ifelse(group ==4, 1, 0))%>%
mutate(Dummy_Geschlecht = ifelse(female ==1, 1, 0)) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0, .)))
#Regression Phase 1:
Reg_Blocks_Phase1 <- Reg_Blocks %>%
filter(block==1)
reg1 <- lm(shifts ~ Dummy_Treatment + Dummy_Geschlecht, data = Reg_Blocks_Phase1)
#Regression Phase 2:
Reg_Blocks_Phase2 <- Reg_Blocks %>%
filter(block==2)
reg2 <- lm(shifts ~ Dummy_Treatment + Dummy_Geschlecht, data = Reg_Blocks_Phase2)
#Regression Phase 3:
Reg_Blocks_Phase3 <- Reg_Blocks %>%
filter(block==3)
reg3 <- lm(shifts ~ Dummy_Treatment + Dummy_Geschlecht, data = Reg_Blocks_Phase3)
# Stargazer-Tabelle erstellen:
stargazer(reg1,reg2,reg3, type = "text",
title = "Regressionsergebnisse: Anzahl Schichten",
dep.var.labels="Phase",
covariate.labels=c("Treatmentgruppe","Weiblich"),out="shifts.htm")
#Entsprechenden Datensatz erstellen:
Reg_Blocks2 <- blocks_2 %>%
filter(group == 3 | group == 4) %>%
mutate(Dummy_Treatment = ifelse(group ==4, 1, 0))%>%
mutate(Dummy_Geschlecht = ifelse(female ==1, 1, 0)) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0, .)))%>%
mutate(revpershift = totrev/shifts)
#Regression Phase 1:
Reg_Blocks2_Phase1 <- Reg_Blocks2 %>%
filter(block==1)
reg4 <- lm(revpershift ~ Dummy_Treatment + Dummy_Geschlecht, data = Reg_Blocks2_Phase1)
#Regression Phase 2:
Reg_Blocks2_Phase2 <- Reg_Blocks2 %>%
filter(block==2)
reg5 <- lm(revpershift ~ Dummy_Treatment + Dummy_Geschlecht, data = Reg_Blocks2_Phase2)
#Regression Phase 3:
Reg_Blocks2_Phase3 <- Reg_Blocks2 %>%
filter(block==3)
reg6 <- lm(revpershift ~ Dummy_Treatment + Dummy_Geschlecht, data = Reg_Blocks2_Phase3)
# Stargazer-Tabelle erstellen:
stargazer(reg4,reg5,reg6, type = "text",
title = "Regressionsergebnisse: Einkommen pro Schicht",
dep.var.labels="Phase",
covariate.labels=c("Treatmentgruppe","Weiblich"),out="shifts.htm")
#Variable zu Erfahrung erstellen -> Anhand von Schichtzahl über 20, da nicht vorgegeben:
Reg_Blocks3 <- blocks_2 %>%
filter(group == 3 | group == 4) %>%
mutate(Dummy_Treatment = ifelse(group ==4, 1, 0))%>%
mutate(Dummy_Geschlecht = ifelse(female ==1, 1, 0)) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0, .))) %>%
mutate(lnten = ifelse(shifts >=20, 1, 0))
#Regression Phase 1:
Reg_Blocks3_Phase1 <- Reg_Blocks3 %>%
filter(block==1)
reg7 <- lm(shifts ~ Dummy_Treatment + Dummy_Geschlecht + lnten, data = Reg_Blocks3_Phase1)
#Regression Phase 2:
Reg_Blocks3_Phase2 <- Reg_Blocks3 %>%
filter(block==2)
reg8 <- lm(shifts ~ Dummy_Treatment + Dummy_Geschlecht + lnten, data = Reg_Blocks3_Phase2)
#Regression Phase 3:
Reg_Blocks3_Phase3 <- Reg_Blocks3 %>%
filter(block==3)
reg9 <- lm(shifts ~ Dummy_Treatment + Dummy_Geschlecht + lnten, data = Reg_Blocks3_Phase3)
# Stargazer-Tabelle erstellen:
stargazer(reg7,reg8,reg9, type = "text",
title = "Regressionsergebnisse: Anzahl Schichten mit Kontrollvariable (Arbeitserfahrung)",
dep.var.labels="Phase",
covariate.labels=c("Treatmentgruppe","Weiblich","Arbeitserfahrung"),out="shifts.htm")
#Entsprechenden Datensatz erstellen:
Reg_Blocks <- blocks_2 %>%
filter(group == 3 | group == 4) %>%
mutate(Dummy_Treatment = ifelse(group ==4, 1, 0))%>%
mutate(Dummy_Geschlecht = ifelse(female ==1, 1, 0)) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0, .)))
#Regression Phase 1:
Reg_Blocks_Phase1 <- Reg_Blocks %>%
filter(block==1)
reg1 <- lm(shifts ~ Dummy_Treatment + Dummy_Geschlecht, data = Reg_Blocks_Phase1)
#Regression Phase 2:
Reg_Blocks_Phase2 <- Reg_Blocks %>%
filter(block==2)
reg2 <- lm(shifts ~ Dummy_Treatment + Dummy_Geschlecht, data = Reg_Blocks_Phase2)
#Regression Phase 3:
Reg_Blocks_Phase3 <- Reg_Blocks %>%
filter(block==3)
reg3 <- lm(shifts ~ Dummy_Treatment + Dummy_Geschlecht, data = Reg_Blocks_Phase3)
# Stargazer-Tabelle erstellen:
stargazer(reg1,reg2,reg3, type = "text",
title = "Regressionsergebnisse: Anzahl Schichten",
dep.var.labels="Phase",
covariate.labels=c("Treatmentgruppe","Weiblich"),out="shifts.htm")
library(tidyverse)
library(haven)
library(readr)
library(readxl)
library(rvest)
library(stringr)
library(httr)
library(lubridate)
library(stargazer)
library(kableExtra)
library(pander)
library(ggplot2)
library(gridExtra)
#Entsprechenden Datensatz erstellen:
Reg_Blocks2 <- blocks_2 %>%
filter(group == 3 | group == 4) %>%
mutate(Dummy_Treatment = ifelse(group ==4, 1, 0))%>%
mutate(Dummy_Geschlecht = ifelse(female ==1, 1, 0)) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0, .)))%>%
mutate(revpershift = totrev/shifts)
#Regression Phase 1:
Reg_Blocks2_Phase1 <- Reg_Blocks2 %>%
filter(block==1)
reg4 <- lm(revpershift ~ Dummy_Treatment + Dummy_Geschlecht, data = Reg_Blocks2_Phase1)
#Regression Phase 2:
Reg_Blocks2_Phase2 <- Reg_Blocks2 %>%
filter(block==2)
reg5 <- lm(revpershift ~ Dummy_Treatment + Dummy_Geschlecht, data = Reg_Blocks2_Phase2)
#Regression Phase 3:
Reg_Blocks2_Phase3 <- Reg_Blocks2 %>%
filter(block==3)
reg6 <- lm(revpershift ~ Dummy_Treatment + Dummy_Geschlecht, data = Reg_Blocks2_Phase3)
# Stargazer-Tabelle erstellen:
stargazer(reg4,reg5,reg6, type = "text",
title = "Regressionsergebnisse: Einkommen pro Schicht",
dep.var.labels="Phase",
covariate.labels=c("Treatmentgruppe","Weiblich"),out="shifts.htm")
library(RTutor)
install.packages("RTutor")
library(RTutor)
install.packages("rtools")
library(RTutor)
install.packages("RTutor")
library(RTutor)
install.packages("RTutor")
library(gridExtra)
library(RTutor)
install.packages("RTutor")
install.packages("Rtools43")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages(RTutor)
install.packages("RTutor")
#< task
#load the package "ggplot2"
library(ggplot2)
#Create a fictive data set
demand <- c(2, 1.5, 1, 0.5, 0)
xAxis <- c(0, 1,2,3,4)
supply <- c(0, 0.5, 1, 1.5, 2)
xGroup <- c(1, 1, 1, 1, 1)
DatasetTest <- data.frame(Price = demand, Quantity = xAxis, Supply = supply, Group = xGroup)
#Create a plot
ggplot(data = DatasetTest) +
geom_line(aes(x=Quantity, y=Price, group = Group), linetype = 1, size = 0.8) +
geom_line(aes(x=Quantity, y=supply, group = Group), linetype = 1, size = 0.8) +
geom_segment(aes(x = 2, y = 0, xend = 2, yend = 1), color = "red", linetype = "dashed") +
geom_segment(aes(x = 0, y = 1, xend = 2, yend = 1), color = "red", linetype = "dashed") +
#Mark Zone A
geom_text(aes(x=0.5, y=1.3, label = "A"), color = "black", hjust=0, size=8, alpha = 0.1) +
#Mark Zone B
geom_text(aes(x=0.5, y=0.7, label = "B"), color = "black", hjust=0, size=8, alpha = 0.1) +
#Mark Zone C
geom_text(aes(x=1.5, y=0.3, label = "C"), color = "black", hjust=0, size=8, alpha = 0.1) +
#Mark intersection point
geom_point(aes(x = 2, y=1), color = "red", size=2.5) +
#Add line description
geom_text(aes(x=0.5, y=1.83, label = "Demand"), color = "Black", angle = 315, size= 4, alpha=0.1) +
geom_text(aes(x=3.35, y=1.78, label = "Supply"), color = "Black", angle = 45, size= 4, alpha=0.1) +
#Set specific layout
theme_bw() +
labs(title = "How is Pre-Purchase Information related to Welfare?",
x = "Quantity",
y = "Price") +
scale_x_continuous(labels = c("0", "", "Q*", "", "")) +
scale_y_continuous(labels = c("0", "", "P*", "", "")) +
theme(
# axis.text.y=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
#>
#< task
#Create a fictive data set
DatasetPE <- data.frame(
Price = 1:10,
Demand_05 = 10 - 0.5*1:10,
Demand_1 = 10 - 1*1:10,
Demand_2 = 10 - 2*1:10
)
colnames(DatasetPE) <- c("Price", "ε > 1", "ε = 1", "ε < 1")
DatasetPE <- DatasetPE %>%
pivot_longer(cols = starts_with("ε"), names_to = "ε", values_to = "Quantity_Value")
library(ggplot2)
#< task
#Create a fictive data set
DatasetPE <- data.frame(
Price = 1:10,
Demand_05 = 10 - 0.5*1:10,
Demand_1 = 10 - 1*1:10,
Demand_2 = 10 - 2*1:10
)
colnames(DatasetPE) <- c("Price", "ε > 1", "ε = 1", "ε < 1")
DatasetPE <- DatasetPE %>%
pivot_longer(cols = starts_with("ε"), names_to = "ε", values_to = "Quantity_Value")
library(yaml)
library(xfun)
library(tidyverse)
library(kableExtra)
library(grid)
library(gridExtra)
#< task
#Create a fictive data set
DatasetPE <- data.frame(
Price = 1:10,
Demand_05 = 10 - 0.5*1:10,
Demand_1 = 10 - 1*1:10,
Demand_2 = 10 - 2*1:10
)
colnames(DatasetPE) <- c("Price", "ε > 1", "ε = 1", "ε < 1")
DatasetPE <- DatasetPE %>%
pivot_longer(cols = starts_with("ε"), names_to = "ε", values_to = "Quantity_Value")
# Umwandeln der Daten in "long format"
ggplot(data = DatasetPE, aes(x = Price, y = Quantity_Value, group = ε)) +
geom_line() +
theme_bw() +
geom_segment(aes(x = 4, y = 8, xend = 4, yend = 9), color = "red", linetype = "dashed") +
geom_segment(aes(x = 4, y = 9, xend = 2, yend = 9), color = "red", linetype = "dashed") +
geom_text(aes(x=2.75, y=9.25, label = "ΔQU = 2"), color = "red", hjust=0, size=2.5, alpha = 0.1) +
geom_text(aes(x=4.25, y=8.95, label = "ΔPU = 1"), color = "red", angle = 270, hjust=0, size=2.5, alpha = 0.1) +
geom_text(aes(x=5, y=7.85, label = "ε = 2"), color = "black", angle = 337.5, hjust=0, size=4, alpha = 0.1) +
geom_segment(aes(x = 4, y = 6, xend = 4, yend = 7), color = "red", linetype = "dashed") +
geom_segment(aes(x = 4, y = 7, xend = 3, yend = 7), color = "red", linetype = "dashed") +
geom_text(aes(x=3.15, y=7.2, label = "ΔQU = 1"), color = "red", hjust=0, size=2.5, alpha = 0.1) +
geom_text(aes(x=4.25, y=6.9, label = "PU = 1"), color = "red", angle = 270, hjust=0, size=2.5, alpha = 0.1) +
geom_text(aes(x=5, y=5.45, label = "ε = 1"), color = "black", angle = 315, hjust=0, size=4, alpha = 0.1) +
geom_segment(aes(x = 4, y = 2, xend = 4, yend = 4), color = "red", linetype = "dashed") +
geom_segment(aes(x = 4, y = 4, xend = 3, yend = 4), color = "red", linetype = "dashed") +
geom_text(aes(x=3.15, y=4.2, label = "ΔQU = 1"), color = "red", hjust=0, size=2.5, alpha = 0.1) +
geom_text(aes(x=4.25, y=3.45, label = "ΔPU = 2"), color = "red", angle = 270, hjust=0, size=2.5, alpha = 0.1) +
geom_text(aes(x=4.6, y=1.7, label = "ε = 0,5"), color = "black", angle = 292.5, hjust=0, size=4, alpha = 0.1) +
labs(title = "Demand Curves and their Price Elasticities",
x = "Quantity in QU (Quantity Units)",
y = "Price in PU (Price Units)") +
xlim(0, 10) +
ylim(0, 10) +
scale_x_continuous(breaks = 0:10) +
theme(panel.grid.minor=element_blank(),plot.background=element_blank())
#>
#< task
#Create a fictive data set
yPredQualityPrice <- c(1.6,1.0,0.50,0.15,-0.10)
xQuan <- c(1,2,3,4,5)
yRealQualityPrice <- c(2.1,1.5,1,0.65,0.4)
xGroup <- c(1, 1, 1, 1, 1)
DatasetTest <- data.frame(Pred_Price = yPredQualityPrice, Quan = xQuan, Real_Price = yRealQualityPrice, Group = xGroup)
#Create a plot
ggplot(data = DatasetTest) +
geom_line(aes(x=Quan, y=Pred_Price, group = Group), linetype = 2, size = 0.9) +
geom_line(aes(x=Quan, y=Real_Price, group = Group), linetype = 1, size = 0.9) +
geom_segment(aes(x = 2, y = 0, xend = 2, yend = 1), color = "red", linetype = "dashed") +
geom_segment(aes(x = 3, y = 0, xend = 3, yend = 1), color = "red", linetype = "dashed") +
geom_segment(aes(x = 4, y = 0, xend = 4, yend = 1), color = "red", linetype = "dashed") +
geom_segment(aes(x = 0, y = 1, xend = 5, yend = 1),size=1.1, color = "red") +
#Mark Zone A
geom_text(aes(x=1.25, y=1.15, label = "A"), color = "black", hjust=0, size=5, alpha = 0.1) +
geom_segment(aes(x = 1, y = 1, xend = 1, yend = 1.5), color = "black", linetype = "dashed") +
#Mark Zone B
geom_text(aes(x=1.5, y=1.5, label = "B"), color = "black", hjust=0, size=5, alpha = 0.1) +
geom_segment(aes(x = 1, y = 1.5, xend = 1, yend = 2.1), color = "black", linetype = "dashed") +
geom_segment(aes(x = 2, y = 1, xend = 2, yend = 1.5), color = "black", linetype = "dashed") +
#Mark Zone C
geom_text(aes(x=2.27, y=1.17, label = "C"), color = "black", hjust=0, size=5, alpha = 0.1) +
#Mark Zone D
geom_text(aes(x=3.6, y=0.9, label = "D"), color = "black", hjust=0, size=5, alpha = 0.1) +
geom_segment(aes(x = 4, y = 0.65, xend = 4, yend = 1), color = "black", linetype = "dashed") +
#Mark intersection points
geom_point(aes(x = 2, y=1), color = "red", size=2.5) +
geom_point(aes(x = 4, y=1), color = "red", size=2.5) +
geom_text(aes(x=1.8, y=0.93, label = "P1"), color = "black", hjust=0, size=3, alpha = 0.1) +
geom_text(aes(x=3.8, y=0.93, label = "P2"), color = "black", hjust=0, size=3, alpha = 0.1) +
#Add line description
geom_text(aes(x=0, y=1.55, label = "Expected Quality without \nPre-Purchase Information\n _  _  _  _  _  _  _  _  _  _  "), color = "Black", hjust=0, size= 2.2, alpha=0.1) +
geom_text(aes(x=0, y=2.05, label = "Actual Quality with \nPre-Purchase Information\n ___________________"), color = "Black", hjust=0, size= 2.2, alpha=0.1) +
#Set specific layout
theme_bw() +
labs(title = "How is Pre-Purchase Information related to Welfare?",
x = "Quantity",
y = "Price") +
scale_x_continuous(breaks = 1:5, labels = c("", "Q1", "Q*", "Q2", "")) +
theme(
axis.text.y=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
#>
setwd("D:/Universitaet Ulm Unterlagen/Bachelorarbeit/The-Impact-Of-Reviews-And-Ratings-On-Bookmarket/replication/data")
setwd("C:/Users/leona/OneDrive/Dokumente/GitHub/The-Impact-Of-Reviews-And-Ratings-On-Bookmarket/replication/data")
data <- readRDS("dataEst.RDS")
getwd()
